{
  "name": "backbone.attributes",
  "version": "0.7.1",
  "author": {
    "name": "Adam Krebs",
    "email": "amk528@cs.nyu.edu"
  },
  "description": "Give any object Backbone getters and setters",
  "licence": "MIT",
  "main": "backbone.attributes",
  "repository": {
    "type": "git",
    "url": "https://github.com/akre54/backbone.attributes"
  },
  "dependencies": {
    "underscore": "*"
  },
  "peerDependencies": {
    "backbone": ">=1.0.0"
  },
  "devDependencies": {
    "backbone": ">=1.0.0",
    "mocha": "*",
    "chai": "*"
  },
  "engines": {
    "node": "*",
    "npm": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "Backbone.Attributes\n===================\n\nBackbone.Attributes is a tiny (~400 bytes minified/gz) plugin to give any object\nBackbone.Model getter/setter methods. Sometimes models are too heavyweight or\nyou don't need the full sync / collection methods Backbone Models provide.\n\n```javascript\nvar view = new Backbone.View;\n_.defaults(view, Backbone.Attributes);\n\nview.on('change:title', function(title) {\n  this.$('.title').text(title);\n});\n\nview.set('title', 'Results');\n```\n\nThese methods are borrowed from Backbone.Model, so their functionality is\nexactly the same. You can pass a hash of properties, listen on multiple\nchange events, or trigger complex change sequences.\n\nNote: `get` and `set` collide with native `Collection#get` and `Collection#set`.\nIf your target is a Collection, you must use the `getAttribute`/`setAttribute`\naliases instead.\n\nThe target object's `attributes` property is set on the first call to a method\nthat relies on its existence (`clear`, `get` or `set`). This is\nmostly to ensure that attributes aren't shared between instances. If you need\n`attributes` earlier, you may create it yourself (e.g. during `initalize`)\nand Backbone.Attributes will respect the existing values.\n\nExample\n-------\nLet's say we're building a music player application that has a list of tracks\norganized into a Playlist collection. When the user clicks on the \"next\" button,\nwe want to update the index of the currently playing track and alert any views\nlistening on the Playlist. It might look something like this:\n\n```javascript\nvar Playlist = Backbone.Collection.extend({\n  defaults: {\n    currentTrack: 0,\n    title: \"My Playlist\"\n  },\n  initialize: function() {\n    this.on('change:currentTrack', function() {\n      var oldTrack = this.at(this.previous('currentTrack')),\n          newTrack = this.at(this.getAttribute('currentTrack'));\n\n      this.stopListening(oldTrack, 'track:done');\n      this.listenTo(newTrack, 'track:done', this.nextTrack);\n    });\n  },\n  setTrack: function(trackPosition) {\n    this.setAttribute('currentTrack', trackPosition);\n  },\n  nextTrack: function() {\n    this.setTrack(this.getAttribute('currentTrack') + 1);\n  }\n});\n\n_.defaults(Playlist.prototype, Backbone.Attributes);\n\nvar PlayerView = Backbone.View.extend({\n  events: {\n    'click .track': 'setTrack'\n  },\n  initialize: function() {\n    this.listenTo(this.collection, 'change:currentTrack', this.updateTrackDetails);\n  },\n  setTrack: function(e) {\n    this.collection.setTrack($(e.target).index());\n  },\n  updateTrackDetails: function() {\n    // Set album art, etc.\n  }\n});\n\nnew PlayerView({collection: new Playlist});\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/akre54/backbone.attributes/issues"
  },
  "homepage": "https://github.com/akre54/backbone.attributes",
  "_id": "backbone.attributes@0.7.1",
  "dist": {
    "shasum": "7487691171fd1157b652c27e08dd8a26b462ce08"
  },
  "_from": "backbone.attributes@",
  "_resolved": "https://registry.npmjs.org/backbone.attributes/-/backbone.attributes-0.7.1.tgz"
}
